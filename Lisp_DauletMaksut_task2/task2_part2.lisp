(setq input '(A (B (E) (F) (G)) (C (H) (I) (J)) (D (K) (L) (M))) )
(setf node "K")
(print (string= "A" (first input)))
(setq input (list input))
(print (length input))

(defun bfs (input)
	(setq depth 0)
	(let ((check 0))
 		(loop do
 		(incf depth)
        (setf check (findRecursion input 0 depth))
        while (= check 0)
       )
 	)

)

(defun findRecursion (input currentlevel level)
	(if (= currentlevel level)
		(return-from findRecursion 0)
	)
	(incf currentlevel)
	(setq superQueue '())
	(dolist (element input)
		(format t "~S " (first element))
		(if (string= node (first element))
			(return-from findRecursion 1)
		)
		(setf superQueue (copy-list(append superQueue (rest element))))

	)
	(findRecursion superQueue currentlevel level)
)
(terpri)
(bfs input)